{"/home/travis/build/npmtest/node-npmtest-gulp-rsync/test.js":"/* istanbul instrument in package npmtest_gulp_rsync */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-rsync/lib.npmtest_gulp_rsync.js":"/* istanbul instrument in package npmtest_gulp_rsync */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_rsync = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_rsync = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-rsync/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-rsync && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_rsync */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_rsync\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_rsync.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_gulp_rsync.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_rsync.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_gulp_rsync.__dirname +\n                    '/lib.npmtest_gulp_rsync.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-rsync/gulp-rsync/index.js":"/*jshint strict: false*/\n\n'use strict';\n\nvar gutil = require('gulp-util');\nvar log = require('./log.js');\nvar path = require('path');\nvar rsync = require('./rsync.js');\nvar through = require('through2');\n\nvar PluginError = gutil.PluginError;\n\nmodule.exports = function(options) {\n  if (typeof options !== 'object') {\n    this.emit(\n      'error',\n      new PluginError('gulp-rsync', 'options must be an object')\n    );\n  }\n\n  if (typeof options.destination !== 'string') {\n    throw new PluginError(\n      'gulp-rsync',\n      'destination must be a string to a desired path'\n    );\n  }\n\n  var sources = [];\n\n  var cwd = options.root ? path.resolve(options.root) : process.cwd();\n\n  return through.obj(function(file, enc, cb) {\n    if (file.isStream()) {\n      this.emit(\n        'error',\n        new PluginError('gulp-rsync', 'Streams are not supported!')\n      );\n    }\n\n    if (path.relative(cwd, file.path).indexOf('..') === 0) {\n      this.emit(\n        'error',\n        new PluginError('gulp-rsync', 'Source contains paths outside of root')\n      );\n    }\n\n    sources.push(file);\n    cb(null, file);\n  }, function(cb) {\n    sources = sources.filter(function(source) {\n      return !source.isNull() ||\n        options.emptyDirectories ||\n        (source.path === cwd && options.recursive);\n    });\n\n    if (sources.length === 0) {\n      cb();\n      return;\n    }\n\n    var shell = options.shell;\n    if (options.port) {\n      shell = 'ssh -p ' + options.port;\n    }\n\n    var destination = options.destination;\n    if (options.hostname) {\n      destination = options.hostname + ':' + destination;\n      if (options.username) {\n        destination = options.username + '@' + destination;\n      }\n    } else {\n      destination = path.relative(cwd, path.resolve(process.cwd(), destination));\n    }\n\n    var config = {\n      options: {\n        'a': options.archive,\n        'n': options.dryrun,\n        'R': options.relative !== false,\n        'c': options.incremental,\n        'd': options.emptyDirectories,\n        'e': shell,\n        'r': options.recursive && !options.archive,\n        't': options.times && !options.archive,\n        'u': options.update,\n        'v': !options.silent,\n        'z': options.compress,\n        'chmod': options.chmod,\n        'exclude': options.exclude,\n        'include': options.include,\n        'progress': options.progress,\n        'links': options.links\n      },\n      source: sources.map(function(source) {\n        return path.relative(cwd, source.path) || '.';\n      }),\n      destination: destination,\n      cwd: cwd\n    };\n\n    if (options.options) {\n      for (var key in options.options) { config.options[key] = options.options[key]; }\n    }\n\n    if (options.clean) {\n      if (!options.recursive && !options.archive) {\n        this.emit(\n          'error',\n          new PluginError('gulp-rsync', 'clean requires recursive or archive option')\n        );\n      }\n      config.options['delete'] = true;\n    }\n\n    if (!options.silent) {\n      var handler = function(data) {\n        data.toString().split('\\r').forEach(function(chunk) {\n          chunk.split('\\n').forEach(function(line, j, lines) {\n            log('gulp-rsync:', line, (j < lines.length - 1 ? '\\n' : ''));\n          });\n        });\n      };\n      config.stdoutHandler = handler;\n      config.stderrHandler = handler;\n\n      gutil.log('gulp-rsync:', 'Starting rsync to ' + destination + '...');\n    }\n\n    rsync(config).execute(function(error, command) {\n      if (error) {\n        this.emit('error', new PluginError('gulp-rsync', error.stack));\n      }\n      if (options.command) {\n        gutil.log(command);\n      }\n      if (!options.silent) {\n        gutil.log('gulp-rsync:', 'Completed rsync.');\n      }\n      cb();\n    }.bind(this));\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-rsync/gulp-rsync/log.js":"'use strict';\n\nvar gutil = require('gulp-util');\nvar util = require('util');\n\nfunction log() {\n  process.stdout.write(util.format.apply(this, arguments)); \n}\n\nmodule.exports = function() {\n  // HACK: In order to show rsync's transfer progress, override `console` temporarily...\n  var orig = console.log;\n  console.log = log;\n  var retval = gutil.log.apply(this, arguments);\n  console.log = orig;\n  return retval;\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-rsync/gulp-rsync/rsync.js":"'use strict';\n\nvar assert = require('better-assert');\nvar every = require('lodash.every');\nvar isString = require('lodash.isstring');\nvar spawn = require('child_process').spawn;\n\nfunction rsync(config) {\n  if (!(this instanceof rsync)) {\n    return new rsync(config);\n  }\n\n  assert(typeof config === 'object');\n  assert(!config.options || typeof config.options === 'object');\n  this._options = config.options || {};\n  var sources = config.source;\n  if (!Array.isArray(sources)) {\n    sources = [sources];\n  }\n  assert(sources.length > 0 && every(sources, isString));\n  assert(sources.length === 1 || config.destination);\n  this._sources = sources;\n  assert(!config.destination || typeof config.destination === 'string');\n  this._destination = config.destination;\n  assert(!config.cwd || typeof config.cwd === 'string');\n  this._cwd = config.cwd;\n  assert(!config.stdoutHandler || typeof config.stdoutHandler === 'function');\n  this._stdout = config.stdoutHandler;\n  assert(!config.stderrHandler || typeof config.stderrHandler === 'function');\n  this._stderr = config.stderrHandler;\n\n  return this;\n}\n\nrsync.prototype = {\n  command: function() {\n    var args = [];\n\n    var shortOptions = [];\n    var longOptions = [];\n\n    for (var key in this._options) {\n      var value = this._options[key];\n      if (typeof value !== 'undefined' && value !== false) {\n        if (key.length === 1 && value === true) {\n          shortOptions.push(key);\n        } else {\n          var values = Array.isArray(value) ? value : [value];\n          for (var i = 0, l = values.length; i < l; i++) {\n            longOptions.push({key: key, value: values[i]});\n          }\n        }\n      }\n    }\n\n    if (shortOptions.length > 0) {\n      args.push('-' + shortOptions.join(''));\n    }\n\n    if (longOptions.length > 0) {\n      args = args.concat(longOptions.map(function(option) {\n        var single = option.key.length === 1;\n        var output = (single ? '-' : '--') + option.key;\n        if (typeof option.value !== 'boolean') {\n          output += (single ? ' ' : '=') + escapeShellArg(option.value);\n        }\n        return output;\n      }));\n    }\n\n    args = args.concat(this._sources.map(escapeShellArg));\n\n    if (this._destination) {\n      args.push(escapeShellArg(this._destination));\n    }\n\n    return 'rsync ' + args.join(' ');\n  },\n\n  execute: function(callback) {\n    var command = this.command();\n\n    var childProcess;\n    if (process.platform === 'win32') {\n      childProcess = spawn('cmd.exe', ['/s', '/c', '\"' + command + '\"'], {\n        cwd: this._cwd,\n        stdio: [process.stdin, 'pipe', 'pipe'],\n        env: process.env,\n        windowsVerbatimArguments: true\n      });\n    } else {\n      childProcess = spawn('/bin/sh', ['-c', command], {\n        cwd: this._cwd,\n        stdio: 'pipe',\n        env: process.env\n      });\n    }\n\n    if (this._stdout) {\n      childProcess.stdout.on('data', this._stdout);\n    }\n\n    if (this._stderr) {\n      childProcess.stderr.on('data', this._stderr);\n    }\n\n    childProcess.on('close', function(code) {\n      var error = null;\n      if (code !== 0) {\n        error = new Error('rsync exited with code ' + code);\n      }\n\n      if (typeof callback === 'function') {\n        callback(error, command);\n      }\n    });\n\n    return childProcess;\n  }\n};\n\nfunction escapeShellArg(arg) {\n  if (!/([\"'`\\\\ ])/.test(arg)) {\n    return arg;\n  }\n  arg = arg.replace(/([\\\\])/g, '/');\n  return '\"' + arg.replace(/([\"'`\\\\])/g, '\\\\$1') + '\"';\n}\n\nmodule.exports = rsync;\n"}